openapi: 3.0.0
info:
  title: Travel Planner
  version: 1.0.0
  description: API for managing travel planning.

servers:
  - url: /api/v1
    description: Main API server

paths:
  /login:
    post:
      summary: User login
      description: Handles user login and issues JWT tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "yourpassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
  /signup:
    post:
      summary: User Signup
      description: Handles user registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "yourpassword"
                username:
                  type: string
                  example: "Bob"

      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          description: Email address already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email address already exists"
        '500':
          description: Error in processing data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error Message Expected"

  /plan_trip:
    post:
      summary: Plan trip to place.
      description: Plan trip of the place using information from the user
      security:
        - accessAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                city:
                  type: string
                  example: "Lagos"
                startDate:
                  type: string
                  example: "10-02-2002"
                endDate:
                  type: string
                  example: "10-05-2002"
                numberOfPeople:
                  type: object
                  properties:
                    number:
                      type: int
                      example: 1
                accommodation:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "4 Points Hotel"
                    price:
                      type: float
                      example: 140
                flights:
                  type: object
                  properties:
                    departure:
                      type: object
                      properties:
                        price:
                          type: float
                          example: 140
                    return:
                      type: object
                      properties:
                        price:
                          type: float
                          example: 140
                transport:
                  type: object
                  properties:
                    cost:
                      type: float
                      example: 140
                meals:
                  type: object
                  properties:
                    price:
                      type: float
                      example: 140
                activities:
                  type: object
                  properties:
                    price:
                      type: float
                      example: 140
                totalBudget:
                  type: float
                  example: 980
      responses:
        '200':
          description: Trip saved successfully
          content:
            application/json:
              schema:
                type: string
                example: "Trip saved successfully"
        '500':
          description: Error while saving
          content:
            application/json:
              schema:
                type: string
                example: "Error while saving Trip {error message}"
  /save_place:
    post:
      summary: save details of place.
      description: get the weather details, picture of the place and save it
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                city:
                  type: string
                  example: "Lagos"
      responses:
        '200':
          description: Weather condition
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "{weather: }"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /load_place:
    get:
      summary: Load information of place.
      description: Get information of place after the query_place
      parameters:
        - in: query
          name: city
          schema:
            type: string
            example: "Lagos"
      responses:
        '200':
          description: Place Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "{weather: }"
        '500':
          description: No information available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No information"




  /dashboard:
    get:
      summary: Get all trips of user and weather data
      description: get the trips, weather details of the place
      security:
        - accessAuth: []
      responses:
        '200':
          description: All Trips listed
          content:
            application/json:
              schema:
                type: array
                properties:
                    type: string
                    example: "[{weather: ...}]"
        '404':
          description: No trip found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No user trip found, try creating a trip"
  /refresh:
    post:
      summary: User Signup
      description: Handles user registration.
      security:
        - refreshAuth: []
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
components:
  securitySchemes:
    accessAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

